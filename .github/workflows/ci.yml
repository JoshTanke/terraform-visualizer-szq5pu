name: Continuous Integration

# Trigger workflow on push and pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Concurrency control to cancel in-progress runs on same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Define permissions
permissions:
  contents: read
  packages: write
  security-events: write

# Environment variables
env:
  NODE_VERSION: '18.x'
  DOCKER_BUILDKIT: '1'
  CI: true

jobs:
  # Security scanning job
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"
          upload: true

      - name: Run dependency vulnerability check
        run: |
          cd src/backend && npm audit
          cd ../web && npm audit

  # Backend CI job
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/backend/package-lock.json

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            src/backend/node_modules
          key: ${{ runner.os }}-node-backend-${{ hashFiles('src/backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-backend-

      - name: Install dependencies
        working-directory: src/backend
        run: npm ci

      - name: Run linting
        working-directory: src/backend
        run: npm run lint

      - name: Run type checking
        working-directory: src/backend
        run: npm run build -- --noEmit

      - name: Run unit tests
        working-directory: src/backend
        run: npm run test:coverage

      - name: Build application
        working-directory: src/backend
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and cache Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infrastructure/docker/backend.Dockerfile
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: terraform-visualizer-backend:${{ github.sha }}

  # Frontend CI job
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            src/web/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-node-frontend-${{ hashFiles('src/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-frontend-

      - name: Install dependencies
        working-directory: src/web
        run: npm ci

      - name: Run linting
        working-directory: src/web
        run: npm run lint

      - name: Run type checking
        working-directory: src/web
        run: npm run typecheck

      - name: Run unit tests
        working-directory: src/web
        run: npm run test:coverage

      - name: Run E2E tests
        working-directory: src/web
        run: npm run test:e2e

      - name: Build application
        working-directory: src/web
        run: npm run build
        env:
          VITE_API_URL: http://localhost:3000
          VITE_WS_URL: ws://localhost:3000

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and cache Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infrastructure/docker/frontend.Dockerfile
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: terraform-visualizer-frontend:${{ github.sha }}
          build-args: |
            VITE_API_URL=http://localhost:3000
            VITE_WS_URL=ws://localhost:3000
            VITE_APP_VERSION=${{ github.sha }}