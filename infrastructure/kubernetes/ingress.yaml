# Kubernetes Ingress Configuration for Terraform Visualization Tool
# Version: networking.k8s.io/v1
# Purpose: Manages external access with secure routing and traffic management

---
# Main Ingress Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: terraform-visualizer-ingress
  namespace: terraform-visualizer
  annotations:
    # Ingress Controller Configuration
    kubernetes.io/ingress.class: "nginx"
    
    # SSL/TLS Configuration
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.3"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';";
    
    # CORS Configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization,Content-Type,Accept,Origin,User-Agent"
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    
    # Rate Limiting
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/limit-burst-multiplier: "2"
    nginx.ingress.kubernetes.io/limit-connections: "20"
    nginx.ingress.kubernetes.io/limit-rpm: "6000"
    
    # Timeouts and Buffer Sizes
    nginx.ingress.kubernetes.io/proxy-body-size: "8m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    
    # Load Balancing
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "route"
    nginx.ingress.kubernetes.io/session-cookie-expires: "86400"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "86400"
    
    # Health Checks
    nginx.ingress.kubernetes.io/healthcheck-path: "/health"
    nginx.ingress.kubernetes.io/healthcheck-interval: "10"
    nginx.ingress.kubernetes.io/healthcheck-timeout: "5"
    nginx.ingress.kubernetes.io/healthcheck-status-codes: "200-399"
    
    # Monitoring
    prometheus.io/scrape: "true"
    prometheus.io/port: "10254"
    prometheus.io/scheme: "http"

spec:
  # TLS Configuration
  tls:
  - hosts:
    - terraform-visualizer.example.com
    secretName: terraform-visualizer-tls

  # Routing Rules
  rules:
  - host: terraform-visualizer.example.com
    http:
      paths:
      # Backend API Route
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-deployment
            port:
              number: 3000
      
      # Frontend Route (Default)
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80

---
# Backend Service Reference
apiVersion: v1
kind: Service
metadata:
  name: backend-deployment
  namespace: terraform-visualizer
spec:
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: terraform-visualizer
    component: backend

---
# Frontend Service Reference
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: terraform-visualizer
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: frontend