# Istio Service Mesh Configuration for Terraform Visualization Tool
# Version: Istio 1.18
# Purpose: Define service mesh policies for traffic management, security, and observability

---
# Gateway Configuration
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: terraform-visualizer-gateway
  namespace: terraform-visualizer
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - "*"
    tls:
      mode: SIMPLE
      credentialName: terraform-visualizer-cert

---
# Virtual Service for Traffic Management
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: terraform-visualizer
  namespace: terraform-visualizer
spec:
  hosts:
  - "*"
  gateways:
  - terraform-visualizer-gateway
  http:
  # Backend API Routes
  - match:
    - uri:
        prefix: "/api"
    route:
    - destination:
        host: backend-service
        port:
          number: 3000
    retries:
      attempts: 3
      perTryTimeout: "2s"
      retryOn: "connect-failure,refused-stream,unavailable"
    timeout: "10s"
    corsPolicy:
      allowOrigins:
      - exact: "https://terraform-visualizer.example.com"
      allowMethods:
      - GET
      - POST
      - PUT
      - DELETE
      allowHeaders:
      - Authorization
      - Content-Type
      maxAge: "24h"

  # Parser Service Routes
  - match:
    - uri:
        prefix: "/parser"
    route:
    - destination:
        host: parser-service
        port:
          number: 3001
    retries:
      attempts: 3
      perTryTimeout: "5s"
      retryOn: "connect-failure,refused-stream,unavailable"
    timeout: "15s"

  # Frontend Routes (default)
  - route:
    - destination:
        host: frontend-service
        port:
          number: 80

---
# Destination Rules for Load Balancing
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: frontend-destination
  namespace: terraform-visualizer
spec:
  host: frontend-service
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 100
        maxRequestsPerConnection: 10
    outlierDetection:
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 60s

---
# mTLS Authentication Policy
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: terraform-visualizer
spec:
  mtls:
    mode: STRICT

---
# Authorization Policy
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: terraform-visualizer-auth
  namespace: terraform-visualizer
spec:
  selector:
    matchLabels:
      app: terraform-visualizer
  rules:
  # Frontend to Backend communication
  - from:
    - source:
        principals: ["cluster.local/ns/terraform-visualizer/sa/frontend-service-account"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/*"]
  # Backend to Parser communication
  - from:
    - source:
        principals: ["cluster.local/ns/terraform-visualizer/sa/backend-service-account"]
    to:
    - operation:
        methods: ["POST"]
        paths: ["/parser/*"]

---
# Telemetry Configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: terraform-visualizer-telemetry
  namespace: terraform-visualizer
spec:
  tracing:
  - customTags:
      service.version:
        literal:
          value: "1.0.0"
      deployment.environment:
        literal:
          value: "production"
    randomSamplingPercentage: 100.0
  metrics:
  - providers:
    - name: prometheus
    metrics:
    - name: request_duration_seconds
      type: DISTRIBUTION
      dimensions:
        source_service: source.service.name
        destination_service: destination.service.name
        response_code: response.code
    - name: request_total
      type: COUNTER
      dimensions:
        source_service: source.service.name
        destination_service: destination.service.name
        response_code: response.code

---
# Service Entry for External Services
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: github-api
  namespace: terraform-visualizer
spec:
  hosts:
  - "api.github.com"
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS
  location: MESH_EXTERNAL